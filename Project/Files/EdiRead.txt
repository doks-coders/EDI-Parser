using EdiEngine;
using EdiEngine.Runtime;
using Newtonsoft.Json;
using System.Text;

namespace ConsoleApplication2
{
    class Program
    {
        static async Task Main(string[] args)
        {
            string dir = GetParentDirectory();
           
            var edi = await ReadFile($"{dir}/medical-edi.txt");

            var interchanges = await ReturnInterChanges(edi);

            //var res = await ParseInterChanges(interchanges);
            //var json = await ParseToJSON(str);


            //await WriteFile(res.Name, res.Content);

        }
        public record ParsedInterChange(string Name, string Content);
        public static async Task WriteFile(string Name, string csvString)
        {
            var currentDirectory = GetParentDirectory();
            await File.WriteAllTextAsync(currentDirectory + $"/{Name}.csv", csvString);
        }
        public static async Task WriteFileToJSON(string Name, string jsonString)
        {
            var currentDirectory = GetParentDirectory();
            await File.WriteAllTextAsync(currentDirectory + $"/{Name}.json", jsonString);
        }
        public static async Task<List<EdiInterchange>> ReturnInterChanges(string edi)
        {
                
            EdiDataReader r = new EdiDataReader();
            
            EdiBatch b = r.FromString(edi);
            string jsonTrans = JsonConvert.SerializeObject(b);
            await WriteFileToJSON("Medical", jsonTrans);
            return b.Interchanges;
        }

        public static async Task<ParsedInterChange> ParseInterChanges(List<EdiInterchange> interchanges)
        {
            var sb = new StringBuilder();
            var po = string.Empty;
            foreach (var interchange in interchanges)
            {
                foreach (var groups in interchange.Groups)
                {
                    foreach (var transaction in groups.Transactions)
                    {
                        //po = string.Empty;
                        foreach (var content in transaction.Content)
                        {
                            if (content.Name.Equals("BEG")) //keyword is BEG
                            {
                                var ediSegment = content as EdiSegment;
                                var ediContent = ediSegment.Content[2]; //content "E": "08292243254" This will be the name of the file
                                if (ediContent != null)
                                {
                                    po = ediContent.Val;
                                }
                            }

                            if (content.Name.Equals("L_PO1")) //keyword is BEG
                            {
                                var ediLoop = content as EdiLoop; //EdiSegment
                                if (ediLoop != null)
                                {
                                    foreach (var loop in ediLoop.Content)
                                    {
                                        if (loop.Name.Equals("PO1"))
                                        {
                                            var ediContent = loop as EdiSegment;
                                            foreach(var  segment in ediContent.Content)
                                            {
                                                var val = segment.Val;
                                                sb.Append($"{val},");
                                            }
                                        }
                                    }
                                    sb.Append("\n");
                                }


                            }

                        }


                    }
                }
            }

            return new ParsedInterChange(po,sb.ToString());

        }
        public static async Task<string> ReadFile(string path)
        {
            if (!File.Exists(path)) throw new FileNotFoundException();
            var stringValue = await File.ReadAllTextAsync(path, Encoding.UTF8);
            stringValue = stringValue.Replace("\n", "");
            return stringValue;
        }

        public static string GetParentDirectory()
        {
            string rootDirectory = Directory.GetCurrentDirectory();
            Enumerable.Range(0, 3).ToList().ForEach((e) =>
            {
                rootDirectory = Directory.GetParent(rootDirectory).FullName;
            });
            return rootDirectory;
        }
    }


}


/*
 * 
 * EdiDataReader r = new EdiDataReader();
            EdiBatch b = r.FromString(edi);

            //Serialize the whole batch to JSON
            JsonDataWriter w1 = new JsonDataWriter();
            string json = w1.WriteToString(b);

            //OR Serialize selected EDI message to Json
            //Interchanges[0].Groups[0].Transactions[0]

            string jsonTrans = JsonConvert.SerializeObject(b.Interchanges[0].Groups[0].Transactions[0]);

            //Serialize the whole batch to XML
            XmlDataWriter w2 = new XmlDataWriter();
            string xml = w2.WriteToString(b);
 */